/*!
 * VanillaTilt.js - A smooth 3D tilt javascript library.
 * Author: micku7zu
 * Licensed under the MIT license.
 * https://github.com/micku7zu/vanilla-tilt.js
 */
class VanillaTilt {
    constructor(element, settings = {}) {
        if (!(element instanceof Node)) {
            throw ("Can't initialize VanillaTilt because " + element + " is not a Node.");
        }

        this.width = null;
        this.height = null;
        this.left = null;
        this.top = null;
        this.transitionTimeout = null;
        this.updateCall = null;
        this.event = null;

        this.updateBind = this.update.bind(this);
        this.resetBind = this.reset.bind(this);

        this.element = element;
        this.settings = this.extendSettings(settings);

        this.reverse = this.settings.reverse ? -1 : 1;
        this.glare = VanillaTilt.isSettingTrue(this.settings.glare);
        this.glarePrerender = VanillaTilt.isSettingTrue(this.settings["glare-prerender"]);
        this.fullPageListening = VanillaTilt.isSettingTrue(this.settings["full-page-listening"]);
        this.gyroscope = VanillaTilt.isSettingTrue(this.settings.gyroscope);
        this.gyroscopeSamples = this.settings.gyroscopeSamples;

        this.elementListener = this.getElementListener();

        if (this.glare) {
            this.prepareGlare();
        }

        this.addEventListeners();
        this.updateInitialPosition();
    }

    static isSettingTrue(setting) {
        return setting === "" || setting === true || setting === 1;
    }

    getElementListener() {
        if (this.fullPageListening) {
            return window.document;
        }
        if (typeof this.settings["mouse-event-element"] === "string") {
            const mouseEventElement = document.querySelector(this.settings["mouse-event-element"]);
            if (mouseEventElement) {
                return mouseEventElement;
            }
        }
        return this.element;
    }

    addEventListeners() {
        this.onMouseEnterBind = this.onMouseEnter.bind(this);
        this.onMouseMoveBind = this.onMouseMove.bind(this);
        this.onMouseLeaveBind = this.onMouseLeave.bind(this);

        this.elementListener.addEventListener("mouseenter", this.onMouseEnterBind);
        this.elementListener.addEventListener("mousemove", this.onMouseMoveBind);
        this.elementListener.addEventListener("mouseleave", this.onMouseLeaveBind);

        if (this.glare || this.fullPageListening) {
            window.addEventListener("resize", this.onWindowResize.bind(this));
        }

        if (this.gyroscope) {
            this.handleDeviceOrientationBind = this.handleDeviceOrientation.bind(this);
            window.addEventListener("deviceorientation", this.handleDeviceOrientationBind);
        }
    }

    removeEventListeners() {
        this.elementListener.removeEventListener("mouseenter", this.onMouseEnterBind);
        this.elementListener.removeEventListener("mousemove", this.onMouseMoveBind);
        this.elementListener.removeEventListener("mouseleave", this.onMouseLeaveBind);

        if (this.gyroscope) {
            window.removeEventListener("deviceorientation", this.handleDeviceOrientationBind);
        }
        if (this.glare || this.fullPageListening) {
            window.removeEventListener("resize", this.onWindowResize.bind(this));
        }
    }

    destroy() {
        clearTimeout(this.transitionTimeout);
        if (this.updateCall !== null) {
            cancelAnimationFrame(this.updateCall);
        }
        this.reset();
        this.removeEventListeners();
        this.element.vanillaTilt = null;
        if (this.glare) {
            if (this.glarePrerender) {
                this.glareElement.style = "";
            } else {
                this.glareElement.remove();
            }
        }
    }

    onMouseEnter(event) {
        this.updateElementPosition();
        this.element.style.willChange = "transform";
        this.setTransition();
    }

    onMouseMove(event) {
        if (this.updateCall !== null) {
            cancelAnimationFrame(this.updateCall);
        }
        this.event = event;
        this.updateCall = requestAnimationFrame(this.updateBind);
    }

    onMouseLeave(event) {
        this.setTransition();
        if (this.settings.reset) {
            requestAnimationFrame(this.resetBind);
        }
    }

    reset() {
        this.event = {
            pageX: this.left + this.width / 2,
            pageY: this.top + this.height / 2
        };

        if (this.element.style.transform) {
            this.element.style.transform = `perspective(${this.settings.perspective}px) rotateX(0deg) rotateY(0deg) scale3d(1,1,1)`;
        }
        if (this.glare) {
            this.glareElement.style.transform = `rotate(180deg) translate(-50%, -50%)`;
            this.glareElement.style.opacity = `0`;
        }
    }

    getValues() {
        let x, y;
        if (this.fullPageListening) {
            x = this.event.clientX / window.innerWidth;
            y = this.event.clientY / window.innerHeight;
        } else {
            x = (this.event.clientX - this.left) / this.width;
            y = (this.event.clientY - this.top) / this.height;
        }

        x = Math.min(Math.max(x, 0), 1);
        y = Math.min(Math.max(y, 0), 1);

        let tiltX = (this.reverse * (this.settings.max / 2 - x * this.settings.max)).toFixed(2);
        let tiltY = (this.reverse * (y * this.settings.max - this.settings.max / 2)).toFixed(2);

        const angle = Math.atan2(this.event.clientX - (this.left + this.width / 2), -(this.event.clientY - (this.top + this.height / 2))) * 180 / Math.PI;

        return {
            tiltX,
            tiltY,
            percentageX: x * 100,
            percentageY: y * 100,
            angle
        };
    }

    updateElementPosition() {
        let rect = this.element.getBoundingClientRect();
        this.width = this.element.offsetWidth;
        this.height = this.element.offsetHeight;
        this.left = rect.left + window.scrollX;
        this.top = rect.top + window.scrollY;
    }

    updateInitialPosition() {
        if (this.settings.startX === 0 && this.settings.startY === 0) return;
        this.onMouseEnter();
        this.event = {
            clientX: this.left + (this.settings.startX / 100) * this.width,
            clientY: this.top + (this.settings.startY / 100) * this.height
        };
        let values = this.getValues();
        this.element.style.transform = `perspective(${this.settings.perspective}px) rotateX(${this.settings.axis === "x" ? 0 : values.tiltY}deg) rotateY(${this.settings.axis === "y" ? 0 : values.tiltX}deg) scale3d(${this.settings.scale},${this.settings.scale},${this.settings.scale})`;
        if (this.glare) {
            this.glareElement.style.transform = `rotate(${values.angle}deg) translate(-50%, -50%)`;
            this.glareElement.style.opacity = `${(values.percentageY * this.settings["max-glare"] / 100)}`;
        }
    }

    update() {
        let values = this.getValues();

        this.element.style.transform = `perspective(${this.settings.perspective}px) rotateX(${this.settings.axis === "x" ? 0 : values.tiltY}deg) rotateY(${this.settings.axis === "y" ? 0 : values.tiltX}deg) scale3d(${this.settings.scale},${this.settings.scale},${this.settings.scale})`;

        if (this.glare) {
            this.glareElement.style.transform = `rotate(${values.angle}deg) translate(-50%, -50%)`;
            this.glareElement.style.opacity = `${(values.percentageY * this.settings["max-glare"] / 100)}`;
        }

        this.element.dispatchEvent(new CustomEvent("tiltChange", {
            detail: values
        }));

        this.updateCall = null;
    }

    prepareGlare() {
        if (!this.glarePrerender) {
            const glareWrapper = document.createElement("div");
            glareWrapper.classList.add("js-tilt-glare");

            const glare = document.createElement("div");
            glare.classList.add("js-tilt-glare-inner");

            glareWrapper.appendChild(glare);
            this.element.appendChild(glareWrapper);
        }

        this.glareElementWrapper = this.element.querySelector(".js-tilt-glare");
        this.glareElement = this.element.querySelector(".js-tilt-glare-inner");

        if (!this.glarePrerender) {
            Object.assign(this.glareElementWrapper.style, {
                position: "absolute",
                top: "0",
                left: "0",
                width: "100%",
                height: "100%",
                overflow: "hidden",
                pointerEvents: "none"
            });

            Object.assign(this.glareElement.style, {
                position: "absolute",
                top: "50%",
                left: "50%",
                pointerEvents: "none",
                background: `linear-gradient(0deg, rgba(255,255,255,${this.settings["max-glare"]}) 0%, rgba(255,255,255,0) 100%)`,
                width: `${this.element.offsetWidth * 2}px`,
                height: `${this.element.offsetWidth * 2}px`,
                transform: "rotate(180deg) translate(-50%, -50%)",
                transformOrigin: "0% 0%",
                opacity: "0"
            });
        }
    }

    updateGlareSize() {
        if (this.glare) {
            Object.assign(this.glareElement.style, {
                width: `${this.element.offsetWidth * 2}`,
                height: `${this.element.offsetWidth * 2}`
            });
        }
    }

    setTransition() {
        clearTimeout(this.transitionTimeout);
        this.element.style.transition = this.settings.speed + "ms " + this.settings.easing;
        if (this.glare)
            this.glareElement.style.transition = `opacity ${this.settings.speed}ms ${this.settings.easing}`;
        this.transitionTimeout = setTimeout(() => {
            this.element.style.transition = "";
            if (this.glare)
                this.glareElement.style.transition = "";
        }, this.settings.speed);
    }

    extendSettings(settings) {
        let defaultSettings = {
            reverse: false,
            max: 15,
            startX: 0,
            startY: 0,
            perspective: 1000,
            easing: "cubic-bezier(.03,.98,.52,.99)",
            scale: 1,
            speed: 400,
            transition: true,
            axis: null,
            glare: false,
            "max-glare": 1,
            "glare-prerender": false,
            "full-page-listening": false,
            "mouse-event-element": null,
            reset: true,
            gyroscope: true,
            gyroscopeMinAngleX: -45,
            gyroscopeMaxAngleX: 45,
            gyroscopeMinAngleY: -45,
            gyroscopeMaxAngleY: 45,
            gyroscopeSamples: 10
        };

        let newSettings = {};
        for (let property in defaultSettings) {
            if (property in settings) {
                newSettings[property] = settings[property];
            } else if (this.element.hasAttribute("data-tilt-" + property)) {
                let attribute = this.element.getAttribute("data-tilt-" + property);
                newSettings[property] = attribute === "null" ? null : attribute;
            } else {
                newSettings[property] = defaultSettings[property];
            }
        }

        if (typeof newSettings.scale === "string") {
            newSettings.scale = Number(newSettings.scale);
        }
        if (typeof newSettings.startX === "string") {
            newSettings.startX = Number(newSettings.startX);
        }
        if (typeof newSettings.startY === "string") {
            newSettings.startY = Number(newSettings.startY);
        }
        if (typeof newSettings.max === "string") {
            newSettings.max = Number(newSettings.max);
        }
        if (typeof newSettings["max-glare"] === "string") {
            newSettings["max-glare"] = Number(newSettings["max-glare"]);
        }
        if (typeof newSettings.speed === "string") {
            newSettings.speed = Number(newSettings.speed);
        }
        if (typeof newSettings.gyroscopeMinAngleX === "string") {
            newSettings.gyroscopeMinAngleX = Number(newSettings.gyroscopeMinAngleX);
        }
        if (typeof newSettings.gyroscopeMaxAngleX === "string") {
            newSettings.gyroscopeMaxAngleX = Number(newSettings.gyroscopeMaxAngleX);
        }
        if (typeof newSettings.gyroscopeMinAngleY === "string") {
            newSettings.gyroscopeMinAngleY = Number(newSettings.gyroscopeMinAngleY);
        }
        if (typeof newSettings.gyroscopeMaxAngleY === "string") {
            newSettings.gyroscopeMaxAngleY = Number(newSettings.gyroscopeMaxAngleY);
        }
        if (typeof newSettings.gyroscopeSamples === "string") {
            newSettings.gyroscopeSamples = Number(newSettings.gyroscopeSamples);
        }

        return newSettings;
    }

    onWindowResize() {
        this.updateElementPosition();
        this.updateGlareSize();
    }

    handleDeviceOrientation(event) {
        if (!event.gamma || !event.beta) return;

        this.lastGamma = this.lastGamma || event.gamma;
        this.lastBeta = this.lastBeta || event.beta;

        let totalX = 0, totalY = 0;
        this.gyroscopeSamples = this.gyroscopeSamples || 10;
        this.gyroscopeSampleIndex = this.gyroscopeSampleIndex || 0;
        this.gyroscopeSamplesX = this.gyroscopeSamplesX || [];
        this.gyroscopeSamplesY = this.gyroscopeSamplesY || [];

        this.gyroscopeSamplesX[this.gyroscopeSampleIndex] = event.gamma;
        this.gyroscopeSamplesY[this.gyroscopeSampleIndex] = event.beta;

        this.gyroscopeSampleIndex = (this.gyroscopeSampleIndex + 1) % this.gyroscopeSamples;

        for (let i = 0; i < this.gyroscopeSamples; i++) {
            totalX += this.gyroscopeSamplesX[i] || 0;
            totalY += this.gyroscopeSamplesY[i] || 0;
        }

        let averageGamma = totalX / this.gyroscopeSamples;
        let averageBeta = totalY / this.gyroscopeSamples;

        let x = (averageGamma - this.settings.gyroscopeMinAngleX) / (this.settings.gyroscopeMaxAngleX - this.settings.gyroscopeMinAngleX);
        let y = (averageBeta - this.settings.gyroscopeMinAngleY) / (this.settings.gyroscopeMaxAngleY - this.settings.gyroscopeMinAngleY);

        this.event = {
            clientX: x * this.width + this.left,
            clientY: y * this.height + this.top
        };

        if (this.updateCall !== null) {
            cancelAnimationFrame(this.updateCall);
        }
        this.updateCall = requestAnimationFrame(this.updateBind);
    }

    static init(elements, settings) {
        if (elements instanceof Node) elements = [elements];
        if (elements instanceof NodeList || elements instanceof HTMLCollection) elements = [].slice.call(elements);

        if (!(elements instanceof Array)) return;

        elements.forEach((element) => {
            if (!("vanillaTilt" in element)) {
                element.vanillaTilt = new VanillaTilt(element, settings);
            }
        });
    }
}

if (typeof document !== "undefined") {
    window.VanillaTilt = VanillaTilt;

    VanillaTilt.init(document.querySelectorAll("[data-tilt]"));
}

export default VanillaTilt;